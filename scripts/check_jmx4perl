#!/usr/bin/perl 
# nagios: +epn

=cut

use FindBin qw ($Bin);
# Used for running directly out of the distrib dir,
# but we put the lib at last to avoid security issues
# on a proper installed system
#BEGIN { push(@INC, qq($Bin/../lib)); }
use lib qq($Bin/../lib);
use Nagios::Plugin::Functions;
use JMX::Jmx4Perl::Nagios::CheckJmx4Perl;

# Hack for avoiding a label in front of "OK" or "CRITICAL", in order to conform
# to the usual Nagios conventions and to avoid redundancy in the UI display.
BEGIN {
    no warnings 'redefine';
    *Nagios::Plugin::Functions::get_shortname = sub {
        return undef;
    };
}

# Create new object and use this for the check
# Hopefully it gets cleaned up aftewards if running
# within the embedded Nagios perl interpreter. At least, 
# we don't keep any references.
JMX::Jmx4Perl::Nagios::CheckJmx4Perl->new(@ARGV)->execute();

=head1 NAME 

check_jmx4perl - Nagios check using jmx4perl for accessing JMX information 

=head1 SYNOPSIS 

 # Check used heap memory for absolute values
 check_jmx4perl --url http://localhost:8888/j4p \
                --name memory_used \
                --mbean java.lang:type=Memory \
                --attribute HeapMemoryUsage \ 
                --path used \
                --critical 10000000 \
                --warning   5000000 

 
 # Check for string values by comparing them literally
 check_jmx4perl --url http://localhost::8888/j4p \
                --mbean myDomain:name=myMBean \
                --attribute stringAttribute \
                --string \
                --critical 'Stopped' \
                --warning '!Started'

 # Check used heap memory for absolute values by using an alias
 check_jmx4perl --url http://localhost:8888/j4p \
                --alias MEMORY_HEAP_USED \
                --critical 10000000 \
                --warning   5000000 

 # Check that the used heap memory is below 80% of the available memory
 check_jmx4perl --url http://localhost:8888/j4p \
                --alias MEMORY_HEAP_USED \
                --base MEMORY_HEAP_MAX \ 
                --critical :80

 # Check that no more than 5 threads are started in a minute
 check_jmx4perl --url http://localhost:8888/j4p \
                --alias THREAD_COUNT_STARTED \
                --delta 60 \
                --critical 5

 # Execute a JMX operation on an MBean and use the return value for threshold
 check_jmx4perl --url http://localhost:8888/j4p \
                --mbean jmx4perl:type=Runtime \
                --operation getNrQueriesFor \
                --critical 10 \
                "operation" \
                "java.lang:type=Memory" \
                "gc" 

 # Use check_jmx4perl in proxy mode
 check_jmx4perl --url http://localhost:8888/j4p \
                --alias MEMORY_HEAP_USED \
                --critical 10000000 \
                --target service:jmx:rmi:///jndi/rmi://bhut:9999/jmxrmi
  
 # Use predefined checks in a configuration file with a server alias
 # Server alias is 'webshop', check is about requests per minute for the 
 # servlet 'socks_shop'
 check_jmx4perl --config /etc/nagios/check_jmx4perl/tomcat.cfg
                --server webshop \
                --check tc_servlet_requests \
                --critical 1000 \
                socks_shop

=head1 DESCRIPTION

C<check_jmx4perl> is a Nagios plugin for monitoring Java applications. It uses
an agent based approach for accessing JMX exposed informations remotely. See
L<JMX::Jmx4Perl> for more background information about the technical details. 

Before start using C<check_jmx4perl> an agent must be installed on the target
platform. For JEE application server this is a simple webapplication packaged
as a C<war> archive. For othter platforms, other agents are available as
well. Please refer to the C<README> for the installation instructions and the
supported platforms. 

Regardless which agent are in use, it can be reached by a simple URL. This URL
needs to be used in the C<check_jmx4perl> configuration.

This plugin can be used in two modes: First, all required parameters for
identifying the JMX information can be given via the command line. Second, a
configuration file can be used to define one or more nagios checks. This is the
recommended mode, since it allows for more advanced features not available when
using the command line alone. Each command line argument has an equivalent
option in the configuration files, though.

=head1 TUTORIAL

Before we dive into the more nifty details, first a 5 minute tutorial to get a
first impression:

=over 

=item * 

This tutorial uses I<tomcat> as application server. Download it from
L<http://tomcat.apache.org> (either version 5 or 6) and extract it:

  $ tar zxvf apache-tomcat-*.tar.gz
  $ # We need this variable later on:
  $ TC=`pwd`/apache-tomcat*

=item *

Download I<jmx4perl> from L<http://search.cpan.org/roland/jmx4perl> and install
it as usual:

  $ tar zcvf jmx4perl-*.tar.gz
  $ cd jmx4perl*
  $ # Store current directory for later reference:
  $ J4P=`pwd`      
  $ perl Build.PL
  $ sudo ./Build install

Beside the Perl modules C<JMX::Jmx4Perl> which can be used for programmatic JMX
access, this nagios plugin C<check_jmx4perl> is installed in a standard
location (F</usr/bin>, F</usr/local/bin> or whatever your Perl installation
thinks is appropriate)

=item * 

Install the jmx4perl agent in tomcat:

  $ cd $J4P
  $ cp agent/j4p.war $TC/webapps 

=item * 

Start the Tomcat server:

  $ $TC/bin/startup.sh

=item * 

Check your setup:
  
  $ jmx4perl http://localhost:8080/j4p

This will print out a summary information about your
setup. L<http://localhost:8080/j4p> is the URL under which the agent is
reachable. Tomcat itself listens on port 8080 by default, and any autodeployed
war archive can be reached under its filename without suffix (j4p in this case). 

=item *

A first nagios check for checking the amount of available heap memory in
relation to the maximal available heap:

  $ check_jmx4perl --url http://localhost:8080/j4p  \
                   --mbean java.lang:type=Memory    \
                   --attribute HeapMemoryUsage      \
                   --path used                      \
                   --base java.lang:type=Memory/HeapMemoryUsage/max \
                   --warning 80                     \
                   --critical 90        

  OK - [java.lang:type=Memory,HeapMemoryUsage,used] : In range 9.83% (12778136 / 129957888) | '[java.lang:type#Memory,HeapMemoryUsage,used]'=12778136;103966310.4;116962099.2;0;129957888            

where 

=over 

=item --url http://localhost:8080/j4p

is the agent URL

=item --mbean java.lang:type=Memory

is the MBean name

=item --attribute HeapMemoryUsage

is the attribute to monitor

=item --path used

is an inner path (see below), which specifies an inner value within a more
complex structure. The value of this specified attribute is a composed value
(CompositeData) which combines multiple memory related data together. The
complete value of this attribute can be viewed with I<jmx4perl>:

   $ jmx4perl http://localhost:8080/j4p read java.lang:type=Memory HeapMemoryUsage

   $VAR1 = {
          'committed' => '85000192',
          'used' => '15106608',
          'max' => '129957888',
          'init' => '0'
        };

=item --base java.lang:type=Memory/HeapMemoryUsage/max

is the base value for which a relative threshold should be applied. This is a
short cut notation in the format I<mbean>C</>I<attribute>C</>I<path>. Slashes
with values must be escaped with a C<\>. A shortcut is also available for
specifing the value to monitor with the B<--value> option

=item --warning 80

is the warning threshold in percent. I.e. a C<WARNING> will be raised by this
plugin when the heap memory usage is larger than 80% of the maximal available
heap memory for the application server (which is I<smaller> than the available
memory of the operating system)

=item --critical 90

is the critical threshold in percent. If the available heap memory reaches 90%
of the available heap, a C<CRITICAL> will be returned.

=back

=item *

For more complex checks the usage of a configuration file is recommended. This
also allows you to keep you Nagios service definitions small and tidy. E.g. for
monitoring the number of request per minute for a certain web application, a
predefined check is available:

 $ check_jmx4perl --url http://localhost:8080/j4p \
                  --config $J4P/config/tomcat.cfg \
                  --check tc_servlet_requests \
                  --critical 100 \
                  j4p-agent
 
 OK - 15.00 requests/minute | ''Requests j4p-agent''=15;5000;100

where 

=over 

=item --config $J4P/config/tomcat.cfg 

is the path to configuration file. There a several predefined checks coming
with this distribution, they are fairly well documented. Look there for some
inspiration for what to check.

=item --check

is the name of the check to perform which must be defined in the configuration
file 

=item j4p-agent

is an extra argument used by the predefined check. It is the name of the
servlet for which the number of requests should be monitored. To get the name
of all registered servlets use C<jmx4perl list>:

  $ jmx4perl http://localhost:8080/j4p list | grep j2eeType=Servlet

The servlet name is the value of the C<name> property of the listed MBeans.

=back

Check configuration files are very powerful and are the recommended way for
configuring C<check_jmx4perl> for any larger installation. Features like multi
checks are even only available when using a configuration file.

=item *

Next, a Nagios service definition needs to be added. For our memory example
above, this looks like:



Add this to the place where you normally add service definitions (depending on
you Nagios installation).

=cut 

=head1 BACKGROUND

This section explains the JMX basics necessary to better understand the usage
of C<check_jmx4perl>. It tries to be as brief as possible, but some theory is
required to get the link to the Java world.

=head1 MBeans

JMX's central entity is an E<MBean>. An MBean exposes management information in
a well defined way. Each MBean has a unique name with the following structure:

  domain:attribute1=value1,attribute2=value2, .....

E.g.

  java.lang:type=Memory

point to the MBean which let you access the memory information of the target
server. 

Before you start monitoring, you need to know the MBean name. Unfortunately,
except for so called I<MXBeans>
(L<http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/package-summary.html>)
there is no standard naming scheme for MBeans. Each platform uses its own, so
the first task is to identify the object name of the MBean to monitor. (There
used to be a Java naming standard defined in B<JSR77>
(L<http://jcp.org/en/jsr/detail?id=77>), unfortunately is whas never widely
adopted.

There are various ways to identify MBeans on a server:

=over 

=item * 

Use C<jmx4perl --list> to list all registered MBeans. In addition C<jmx4perl
--attributes> dumps out all known MBean attributes along with their values. 
(Be careful, the output can be quite large)

=item *

Use C<j4psh> for interactively exploring the JMX namespace.

=item *

Use an alias. An alias is a shortcut for an MBean name, predefined by
L<JMX::Jmx4Perl>. All known aliases can be shown with C<jmx4perl>.  Since each
platform can have slightly different MBean names for the same information, this
is extra level of indirection might help in identifying MBeans. See below for
more about aliases.

=item *

Use a predefined check. C<check_jmx4perl> comes with quite some checks
predefined in various configuration files. These are ready for use out of the
box. 

=item *

As your Java application development team for application specific MBean names. 

=back.

=head2 Operational Modes

C<check_jmx4perl> can obtain the information to monitor from two sources:
Either as MBean I<attributes> or as return value from JMX I<operations>.  Since
JMX values can be any Java Object, it is important to understand, how
C<check_jmx4perl> (or JMX::Jmx4Perl in general) handles this situation.

Simple data types can be used directly in threshhold checking. I.e. the
following data types can be used directly

=over

=item * 

Integer

=item * 

Long

=item * 

Float

=item * 

Double

=item * 

Boolean

=item * 

String

=back

C<String> and C<Boolean> can be used in I<string> checks only, whereas the others
can be used in both, I<numeric> and I<string> checks (see below).

=head3 Pathes

For more complex types, C<check_jmx4perl> provides the concept of so called
I<pathes> for specifying an inner attribute of a more complex attribute or
operation return value. A path is build of parts, separated by slashes
(/). It's simplified variant of an XPath expression for accessing parts of an
XML document. Each part points to an level of the JSON serialized object. 

For example, the MBean C<java.lang:type=Memory> exposes an attribute called
C<HeapMemoryUsage>. This attribute is a combound data type, which contains
multiple entries. Looking with C<jmx4perl> at this attribute

 $ jmx4perl http://localhost:8080/j4p read java.lang:type=Memory HeapMemoryUsage
 $VAR1 = {
           'committed' => '85000192',
           'used' => '8135440',
           'max' => '129957888',
           'init' => '0'
         };

one can see, that there are 4 values coming with the reponse. With a path C<used>
one can directly pick the used heap memory usage (8135440 bytes in this case)
which can be used in a threshold check. This path can be used with
C<check_jmx4perl> like 

 $ check_jmx4perl --url http://localhost:8080/j4p \ 
                  --mbean java.lang:type=Memory \ 
                  --attribute HeapMemoryUsage \
                  --path used \
                  --critical 100000000
 OK - [java.lang:type=Memory,HeapMemoryUsage,used] : Value 10136056 in range | ...

=head3 Attributes

Attribute are values which can be obtained from MBeans. They can be of a simple
data type like a string or an integer, but they can be arbitrarly complex (e.g
an arbitrary Java type). Simple data types can be used directly for threshold
checking where the value is compared against a critical or warning threshold
directly. 




-- Values
-- 

=head3 Operations


=head2 Aliases

=head2 Relative Checks

=head2 Incremental Checks

=head2 Output Tuning

=head2 Proxy mode
 
=head1 COMMAND LINE 

The pure command line interface (without a configuration file) is mostly suited
for simple checks where the predefined defaults are suitable. For all other use
case, a configuration file fits better. 

=head2 Command Line Options




Command for providing Nagios conmpliant output for JMX response fetched via
L<JMX::Jmx4Perl>. It knows about critical (via C<--critical>) and warning (via
C<--warning>) thresholds. 

You can also use direct string comparison. In this case C<--critical> and
C<--warning> are not treated as numerical values but as string types. They are
compared literally against the value retrieved and yield the corresponding
Nagios status if matched. If the threshold is given with a leading C<!>, the
condition is negated. E.g. a C<--critical '!Running'> given returns a
C<CRITICAL> if the value is I<not> equals to C<Running>. As a final option you
can also use a regular expression by using C<qr/.../> as threshold value
(substitute C<...> with the pattern to used for comparison). Boolean values are
returned as C<true> or C<false> strings from the agent, so you can check for
them as well with this kind of string comparison.

Whether string comparison or a numerical check is used is determined
automatically based on the value returned. You can enforce a particular mode by
providing the option C<--numeric> or C<--string> respectively.

Values obtained from the server can be interpreteted as relative values when
C<--base> is given. The argument provided here is first tried as an alias name
or checked as an absolute, numeric value. Alternatively, you can use a full
MBean/Attribute/Path specification by using a C</> as separator, e.g. 

  ... --base java.lang:type=Memory/HeapMemoryUsage/max ...

If one of these parts (the path is optional) contains a slash within its name,
the part must be URI encoded. I.e. all parts are URI decoded before usages as
naming pattern. In any case, using an alias or direct MBean names, the base
value is fetched first for calculating the relative value. For a numeric value
given here this is of course not necessary.

C<--delta> switches on incremental mode in which the difference between two
following values is used. The optional argument are interpreted as seconds
which are used for calculating the speed of growth. If not given, only the
difference between the current and the latest value is taken. C<--delta>
doesn't work with C<--base>.

With the option C<--operation> a JMX operation is triggered and the return
value used for threshold calculations. Additionally, if use an operation
alias with C<--alias>, you can ommit C<--operation> and C<--mbean>. Any
arguments required for the operation need to be provided as additional
arguments. 

The output of C<check_jmx4perl> can be highly customized. First of all, you can
provide a unit-of-measurement with the option C<--unit>. This specifies how the
the attribute or an operation's return value should be interpreted. The
units available are

  B  - Byte
  KB - Kilo Byte
  MB - Mega Byte
  GM - Giga Byte
  TM - Terra Byte
  
  us - Microseconds
  ms - Milliseconds
  s  - Seconds
  m  - Minutes
  h  - Hours
  d  - Days

The unit will be used for performance data as well as for the plugin's
output. Large numbers are converted to larger units (and reverse for small
number that are smaller than 1). E.g. C<2048 KB> is converted to C<2
MB>. However, beautifying by conversion is I<only> performed for the plugin
output, B<not> for the performance data for which no conversions happens at all.

Beside unit handling, you can provide your own label for the Nagios output via
C<--label>. The provided option is interpreted as a pattern with the following
placeholders: 

 %v   the absolute value 
 %f   the absolute value as floating point number
 %r   the relative value for relative calculations (--base)
 %u   the value's unit for the output when --unit is used
 %w   the the base value's for the output unit when --unit is used
 %b   the absolut base value as it is used with --base 
 %c   the Nagios exit code in the Form "OK", "WARNING", "CRITICAL" 
      or "UNKNOWN"
 %t   Threshold value which fails ("" when the check doesn't fail)
 %n   name, either calulated automatically or given with --name
 %d   the delta value used for normalization when using incremental mode

Note that C<%u> and C<%w> are typically I<not> the same as the C<--unit>
option. They specify the unit I<after> the conversion for the plugin output as
described above. You can use the same modifiers as for C<sprintf> to fine tune
the output.

Example: 

 check_jmx4perl --url http://localhost:8888/j4p \
                --alias MEMORY_HEAP_USED \
                --base MEMORY_HEAP_MAX \ 
                --critical :80 \
                --label "Heap-Memory: %.2r% used (%.2v %u / %.2b %u)" \
                --unit B

will result in an output like

 OK - Heap-Memory: 3.48% used (17.68 MB / 508.06 MB) | '[MEMORY_HEAP_USED]'=3.48%;;:80

C<check_jmx4perl> can be used in a proxy mode as well. When the option
C<--target> is given, the agent servlet use this url as a JMX Service URL and
tries to connect via a JSR-160 to specified target to obtain the JMX
information from there. Additionally C<--target-user> and C<--target-password>
can be used to provide credentials if the target server is secure with user-
and password name. Please see the manual for more information about the proxy
mode and its limitations.

=head1 CONFIGURATION

=head2 Multichecks

=head2 Parent checks

=head2 Parameterized checks

=head2 Predefined checks



=head1 LICENSE

This file is part of jmx4perl.

Jmx4perl is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

jmx4perl is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with jmx4perl.  If not, see <http://www.gnu.org/licenses/>.

=head1 AUTHOR

roland@cpan.org

=cut

1;
