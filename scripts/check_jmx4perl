#!/usr/bin/perl 
# nagios: +epn

use FindBin qw ($Bin);

# Used for running directly out of the distrib dir,
# but we put the lib at last to avoid security issues
# on a proper installed system
#BEGIN { push(@INC, qq($Bin/../lib)); }
use lib qq($Bin/../lib);
use Nagios::Plugin::Functions;
use JMX::Jmx4Perl::Nagios::CheckJmx4Perl;

# Hack for avoiding a label in front of "OK" or "CRITICAL", in order to conform
# to the usual Nagios conventions and to avoid redundancy in the UI display.
BEGIN {
    no warnings 'redefine';
    *Nagios::Plugin::Functions::get_shortname = sub {
        return undef;
    };
}

# Create new object and use this for the check
# Hopefully it gets cleaned up aftewards if running
# within the embedded Nagios perl interpreter. At least, 
# we don't keep any references.
JMX::Jmx4Perl::Nagios::CheckJmx4Perl->new(@ARGV)->execute();

=head1 NAME 

check_jmx4perl - Nagios check using jmx4perl for accessing JMX information 

=head1 SYNOPSIS 

 # Check used heap memory for absolute values
 check_jmx4perl --url http://localhost:8888/j4p \
                --name memory_used \
                --mbean java.lang:type=Memory \
                --attribute HeapMemoryUsage \ 
                --path used \
                --critical 10000000 \
                --warning   5000000 

 
 # Check for string values by comparing them literally
 check_jmx4perl --url http://localhost::8888/j4p \
                --mbean myDomain:name=myMBean \
                --attribute stringAttribute \
                --string \
                --critical 'Stopped' \
                --warning '!Started'

 # Check used heap memory for absolute values by using an alias
 check_jmx4perl --url http://localhost:8888/j4p \
                --alias MEMORY_HEAP_USED \
                --critical 10000000 \
                --warning   5000000 

 # Check that the used heap memory is below 80% of the available memory
 check_jmx4perl --url http://localhost:8888/j4p \
                --alias MEMORY_HEAP_USED \
                --base MEMORY_HEAP_MAX \ 
                --critical :80

 # Check that no more than 5 threads are started in a minute
 check_jmx4perl --url http://localhost:8888/j4p \
                --alias THREAD_COUNT_STARTED \
                --delta 60 \
                --critical 5

 # Execute a JMX operation on an MBean and use the return value for threshold
 check_jmx4perl --url http://localhost:8888/j4p \
                --mbean jmx4perl:type=Runtime \
                --operation getNrQueriesFor \
                --critical 10 \
                "operation" \
                "java.lang:type=Memory" \
                "gc" 

 # Use check_jmx4perl in proxy mode
 check_jmx4perl --url http://localhost:8888/j4p \
                --alias MEMORY_HEAP_USED \
                --critical 10000000 \
                --target service:jmx:rmi:///jndi/rmi://bhut:9999/jmxrmi
  
 # Use predefined checks in a configuration file with a server alias
 # Server alias is 'webshop', check is about requests per minute for the 
 # servlet 'socks_shop'
 check_jmx4perl --config /etc/nagios/check_jmx4perl/tomcat.cfg
                --server webshop \
                --check tc_servlet_requests \
                --critical 1000 \
                socks_shop

=head1 DESCRIPTION

C<check_jmx4perl> is a Nagios plugin for monitoring Java applications. It uses
an agent based approach for accessing JMX exposed informations remotely. See
L<JMX::Jmx4Perl> for more background information about the technical details. 

Before start using C<check_jmx4perl> an agent must be installed on the target
platform. For JEE application server this is a simple webapplication packaged
as a C<war> archive. For othter platforms, other agents are available as
well. Please refer to the C<README> for the installation instructions and the
supported platforms. 

Regardless which agent are in use, it can be reached by a simple URL. This URL
needs to be used in the C<check_jmx4perl> configuration.

This plugin can be used in two modes: First, all required parameters for
identifying the JMX information can be given via the command line. Second, a
configuration file can be used to define one or more nagios checks. This is the
recommended mode, since it allows for more advanced features not available when
using the command line alone. Each command line argument has an equivalent
option in the configuration files, though.

=head1 TUTORIAL

Before we dive into the more nifty details, first a 5 minute tutorial to get a
first impression:

=over 

=item * 

This tutorial uses I<tomcat> as application server. Download it from
L<http://tomcat.apache.org> (either version 5 or 6) and extract it:

  $ tar zxvf apache-tomcat-*.tar.gz
  $ # We need this variable later on:
  $ TC=`pwd`/apache-tomcat*

=item *

Download I<jmx4perl> from L<http://search.cpan.org/roland/jmx4perl> and install
it as usual:

  $ tar zcvf jmx4perl-*.tar.gz
  $ cd jmx4perl*
  $ # Store current directory for later reference:
  $ J4P=`pwd`      
  $ perl Build.PL
  $ sudo ./Build install

Beside the Perl modules C<JMX::Jmx4Perl> which can be used for programmatic JMX
access, this nagios plugin C<check_jmx4perl> is installed in a standard
location (F</usr/bin>, F</usr/local/bin> or whatever your Perl installation
thinks is appropriate)

=item * 

Install the jmx4perl agent in tomcat:

  $ cd $J4P
  $ cp agent/j4p.war $TC/webapps 

=item * 

Start the Tomcat server:

  $ $TC/bin/startup.sh

=item * 

Check your setup:
  
  $ jmx4perl http://localhost:8080/j4p

This will print out a summary information about your
setup. L<http://localhost:8080/j4p> is the URL under which the agent is
reachable. Tomcat itself listens on port 8080 by default, and any autodeployed
war archive can be reached under its filename without suffix (j4p in this case). 

=item *

A first nagios check for checking the amount of available heap memory in
relation to the maximal available heap:

  $ check_jmx4perl --url http://localhost:8080/j4p  \
                   --mbean java.lang:type=Memory    \
                   --attribute HeapMemoryUsage      \
                   --path used                      \
                   --base java.lang:type=Memory/HeapMemoryUsage/max \
                   --warning 80                     \
                   --critical 90        

  OK - [java.lang:type=Memory,HeapMemoryUsage,used] : In range 9.83% (12778136 / 129957888) | '[java.lang:type#Memory,HeapMemoryUsage,used]'=12778136;103966310.4;116962099.2;0;129957888            

where 

=over 

=item --url http://localhost:8080/j4p

is the agent URL

=item --mbean java.lang:type=Memory

is the MBean name

=item --attribute HeapMemoryUsage

is the attribute to monitor

=item --path used

is an inner path (see below), which specifies an inner value within a more
complex structure. The value of this specified attribute is a composed value
(CompositeData) which combines multiple memory related data together. The
complete value of this attribute can be viewed with I<jmx4perl>:

   $ jmx4perl http://localhost:8080/j4p read java.lang:type=Memory HeapMemoryUsage

   $VAR1 = {
          'committed' => '85000192',
          'used' => '15106608',
          'max' => '129957888',
          'init' => '0'
        };

=item --base java.lang:type=Memory/HeapMemoryUsage/max

is the base value for which a relative threshold should be applied. This is a
short cut notation in the format I<mbean>C</>I<attribute>C</>I<path>. Slashes
with values must be escaped with a C<\>. A shortcut is also available for
specifing the value to monitor with the B<--value> option

=item --warning 80

is the warning threshold in percent. I.e. a C<WARNING> will be raised by this
plugin when the heap memory usage is larger than 80% of the maximal available
heap memory for the application server (which is I<smaller> than the available
memory of the operating system)

=item --critical 90

is the critical threshold in percent. If the available heap memory reaches 90%
of the available heap, a C<CRITICAL> will be returned.

=back

=item *

For more complex checks the usage of a configuration file is recommended. This
also allows you to keep you Nagios service definitions small and tidy. E.g. for
monitoring the number of request per minute for a certain web application, a
predefined check is available:

 $ check_jmx4perl --url http://localhost:8080/j4p \
                  --config $J4P/config/tomcat.cfg \
                  --check tc_servlet_requests \
                  --critical 100 \
                  j4p-agent
 
 OK - 15.00 requests/minute | ''Requests j4p-agent''=15;5000;100

where 

=over 

=item --config $J4P/config/tomcat.cfg 

is the path to configuration file. There a several predefined checks coming
with this distribution, they are fairly well documented. Look there for some
inspiration for what to check.

=item --check

is the name of the check to perform which must be defined in the configuration
file 

=item j4p-agent

is an extra argument used by the predefined check. It is the name of the
servlet for which the number of requests should be monitored. To get the name
of all registered servlets use C<jmx4perl list>:

  $ jmx4perl http://localhost:8080/j4p list | grep j2eeType=Servlet

The servlet name is the value of the C<name> property of the listed MBeans.

=back

Check configuration files are very powerful and are the recommended way for
configuring C<check_jmx4perl> for any larger installation. Features like multi
checks are even only available when using a configuration file.

=item *

Next, a Nagios service definition needs to be added. For our memory example
above, this looks like:

 TODO

Add this to the place where you normally add service definitions (depending on
you Nagios installation).

=cut 

=head1 BACKGROUND

This section explains the JMX basics necessary to better understand the usage
of C<check_jmx4perl>. It tries to be as brief as possible, but some theory is
required to get the link to the Java world.

=head1 MBeans

JMX's central entity is an E<MBean>. An MBean exposes management information in
a well defined way. Each MBean has a unique name with the following structure:

  domain:attribute1=value1,attribute2=value2, .....

E.g.

  java.lang:type=Memory

point to the MBean which let you access the memory information of the target
server. 

Before you start monitoring, you need to know the MBean name. Unfortunately,
except for so called I<MXBeans>
(L<http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/package-summary.html>)
there is no standard naming scheme for MBeans. Each platform uses its own, so
the first task is to identify the object name of the MBean to monitor. (There
used to be a Java naming standard defined in B<JSR77>
(L<http://jcp.org/en/jsr/detail?id=77>), unfortunately is whas never widely
adopted.

There are various ways to identify MBeans on a server:

=over 

=item * 

Use C<jmx4perl --list> to list all registered MBeans. In addition C<jmx4perl
--attributes> dumps out all known MBean attributes along with their values. 
(Be careful, the output can be quite large)

=item *

Use C<j4psh> for interactively exploring the JMX namespace.

=item *

Use an alias. An alias is a shortcut for an MBean name, predefined by
L<JMX::Jmx4Perl>. All known aliases can be shown with C<jmx4perl>.  Since each
platform can have slightly different MBean names for the same information, this
is extra level of indirection might help in identifying MBeans. See below for
more about aliases.

=item *

Use a predefined check. C<check_jmx4perl> comes with quite some checks
predefined in various configuration files. These are ready for use out of the
box. 

=item *

As your Java application development team for application specific MBean names. 

=back.

=head2 Operational Modes

C<check_jmx4perl> can obtain the information to monitor from two sources:
Either as MBean I<attributes> or as return value from JMX I<operations>.  Since
JMX values can be any Java Object, it is important to understand, how
C<check_jmx4perl> (or JMX::Jmx4Perl in general) handles this situation.

Simple data types can be used directly in threshhold checking. I.e. the
following data types can be used directly

=over

=item * 

Integer

=item * 

Long

=item * 

Float

=item * 

Double

=item * 

Boolean

=item * 

String

=back

C<String> and C<Boolean> can be used in I<string> checks only, whereas the others
can be used in both, I<numeric> and I<string> checks (see below).

=head3 Pathes

For more complex types, C<check_jmx4perl> provides the concept of so called
I<pathes> for specifying an inner attribute of a more complex attribute or
operation return value. A path is build of parts, separated by slashes
(/). It's simplified variant of an XPath expression for accessing parts of an
XML document. Each part points to an level of the JSON serialized object. 

For example, the MBean C<java.lang:type=Memory> exposes an attribute called
C<HeapMemoryUsage>. This attribute is a combound data type, which contains
multiple entries. Looking with C<jmx4perl> at this attribute

 $ jmx4perl http://localhost:8080/j4p read java.lang:type=Memory HeapMemoryUsage
 $VAR1 = {
           'committed' => '85000192',
           'used' => '8135440',
           'max' => '129957888',
           'init' => '0'
         };

one can see, that there are 4 values coming with the reponse. With a path C<used>
one can directly pick the used heap memory usage (8135440 bytes in this case)
which can be used in a threshold check. This path can be used with
C<check_jmx4perl> like 

 $ check_jmx4perl --url http://localhost:8080/j4p \ 
                  --mbean java.lang:type=Memory \ 
                  --attribute HeapMemoryUsage \
                  --path used \
                  --critical 100000000
 OK - [java.lang:type=Memory,HeapMemoryUsage,used] : Value 10136056 in range | ...

=head3 Attributes

Attribute are values which can be obtained from MBeans. They can be a simple
data type like a string or an integer, but they can be arbitrarly complex (e.g
any Java type). Simple data types can be used directly for threshold checking
where the value is compared against a critical or warning threshold
directly. Complex data types are translated into a JSON structure on the agent
side, which works for the most types. To access a single value from a complex
value, the path mechanism as described above can be used. Thresholds can always
be used for simple data types.  

=head3 Operations

Beside attributes, the return values of operations can be used for comparing
against thresholds. Since a JMX exposed operation can also take arguments,
these can be provided as arguments or in the configuration, too. Note, that
only simple typed arguments like strings, numbers and booleans (true/false) can
be used. If an JMX operation requires more complex arguments it can not be used
by this plugin. 

With the option C<--operation> a JMX operation is triggered and the return
value used for threshold calculations. Additionally, if use an operation
alias with C<--alias>, you can ommit C<--operation> and C<--mbean>. Any
arguments required for the operation need to be provided as additional
arguments. 

Example:

 TODO  

=head2 Aliases

Aliases are shortcut for common MBean names and attributes. E.g. the alias
C<MEMORY_HEAP_MAX> specify the MBean C<java.lang:type=Memory>, the attribute
C<HeapMemoryUsage> and the path C<max>. Aliases can be specified with the
C<--alias> option or with the configuration with the C<Alias> configuration
directive. Aliases can be translated to differen MBean names on different
application server. For this, C<check_jmx4perl> uses an autodetection mechanism
to determine the target platform. Currently, this mechanism uses one or more
extra server round-trips. To avoid this overhead, the C<--product> option
(configuration: C<Product>) can be used to specify the target platform
explicitely. This is highly recommended in case you are using the aliasing
feature. 

Aliases are not extensible and can not take any parameters. All availables
aliases can be viewed with 

  jmx4perl aliases

A much more flexible solution is to use parameterized checks, which are defined
in a configuration file. See L</CONFIGURATION> for more details.

=head2 Relative Checks

Often relative values are more interesting than absolute ones. E.g. the
knowledge that 140 MBytes heap memory is used is not so important than to know,
that 56% of the available memory is used. Also, Nagios service definitions for
relative checks are generic as they can be applied for target servers with
different memory footprint.

Relative checks calculate the ratio of a value to a base value. 

The base value has to be provided with C<--base>. The argument provided here is
first tried as an alias name or checked as an absolute, numeric
value. Alternatively, you can use a full MBean/Attribute/Path specification by
using a C</> as separator, e.g.

  ... --base java.lang:type=Memory/HeapMemoryUsage/max ...

If one of these parts (the path is optional) contains a slash within its name,
the slash must be escaped with a backslash (\/). Backslashes in MBean names are
escaped with a double backslash (\\). 

Example: 

   check_jmx4perl --url http://localhost:8080/j4p \ 
                  --value java.lang:type=Memory/HeapMemoryUsage/used \ 
                  --base java.lang:type=Memory/HeapMemoryUsage/max \ 
                  --critical 90

This check will trigger a state change to CRITICAL if the used heap memory will
exceed 90% of the available heap memory. The value itself is specified with the
C<--value> option, which, similar to C<--base> uses a shortcut notation for
specifying the MBean, the attribute and an optional base.

=head2 Incremental Checks

For some values to monitor the absolute value is not interesting but the
increase rate (velocity). E.g. for threads it can be important to know how fast
threads are created.

Incremental checks are switched on with the C<--delta> option (configuration:
C<Delta>). This option takes an optional argument which is interpreted as
seconds for normalization.

Example: 

  check_jmx4perl --url http://localhost:8080/j4p \ 
                 --mbean java.lang:type=Threading \ 
                 --attribute TotalStartedThreadCount \ 
                 --delta 60 \ 
                 --critical 5

This will fail as CRITICAL if more than 5 threads are created per minute (60
seconds). Technically C<check_jmx4perl> uses the I<history> feature of the j4p
agent deployed on the target server. This will always store the result and the
timestamp of the last check on the server side and returns these historical
values on the next check so that the velocity can be calculated. If no value is
given for C<--delta>, then no normalization is used. In the example above,
without a normalization value of 60, a CRITICAL is returned if the number of
threads created increased more than 5 between two checks.

C<--delta> doesn't work with C<--base> (e.g. no incremental mode for relative
checks is available).

=head2 String checks

You can also use direct string comparison. In this case C<--critical> and
C<--warning> are not treated as numerical values but as string types. They are
compared literally against the value retrieved and yield the corresponding
Nagios status if matched. If the threshold is given with a leading C<!>, the
condition is negated. E.g. a C<--critical '!Running'> given returns a
C<CRITICAL> if the value is I<not> equals to C<Running>. As a final option you
can also use a regular expression by using C<qr/.../> as threshold value
(substitute C<...> with the pattern to used for comparison). Boolean values are
returned as C<true> or C<false> strings from the agent, so you can check for
them as well with this kind of string comparison.

Whether string comparison or a numerical check is used is determined
automatically based on the value returned. You can enforce a particular mode by
providing the option C<--numeric> or C<--string> respectively.

=head2 Output Tuning

The output of C<check_jmx4perl> can be highly customized. First of all, you can
provide a unit-of-measurement with the option C<--unit>. This specifies how the
the attribute or an operation's return value should be interpreted. The
units available are

  B  - Byte
  KB - Kilo Byte
  MB - Mega Byte
  GM - Giga Byte
  TM - Terra Byte
  
  us - Microseconds
  ms - Milliseconds
  s  - Seconds
  m  - Minutes
  h  - Hours
  d  - Days

The unit will be used for performance data as well as for the plugin's
output. Large numbers are converted to larger units (and reverse for small
number that are smaller than 1). E.g. C<2048 KB> is converted to C<2
MB>. However, beautifying by conversion is I<only> performed for the plugin
output, B<not> for the performance data for which no conversions happens at all.

Beside unit handling, you can provide your own label for the Nagios output via
C<--label>. The provided option is interpreted as a pattern with the following
placeholders: 

 %v   the absolute value 
 %f   the absolute value as floating point number
 %r   the relative value for relative calculations (--base)
 %u   the value's unit for the output when --unit is used
 %w   the the base value's for the output unit when --unit is used
 %b   the absolut base value as it is used with --base 
 %c   the Nagios exit code in the Form "OK", "WARNING", "CRITICAL" 
      or "UNKNOWN"
 %t   Threshold value which fails ("" when the check doesn't fail)
 %n   name, either calulated automatically or given with --name
 %d   the delta value used for normalization when using incremental mode

Note that C<%u> and C<%w> are typically I<not> the same as the C<--unit>
option. They specify the unit I<after> the conversion for the plugin output as
described above. You can use the same modifiers as for C<sprintf> to fine tune
the output.

Example: 

 check_jmx4perl --url http://localhost:8888/j4p \
                --alias MEMORY_HEAP_USED \
                --base MEMORY_HEAP_MAX \ 
                --critical :80 \
                --label "Heap-Memory: %.2r% used (%.2v %u / %.2b %u)" \
                --unit B

will result in an output like

 OK - Heap-Memory: 3.48% used (17.68 MB / 508.06 MB) | '[MEMORY_HEAP_USED]'=3.48%;;:80

=head2 Proxy mode

C<check_jmx4perl> can be used in a proxy mode as well. When the option
C<--target> (configuration: <Target>) is given, the agent servlet use this url
as a JMX Service URL and tries to connect via a JSR-160 to specified target to
obtain the JMX information from there. Additionally C<--target-user> and
C<--target-password> can be used to provide credentials if the target server is
secured with user- and password name. Please see the manual for more
information about the proxy mode and its limitations.  

=head1 COMMAND LINE

The pure command line interface (without a configuration file) is mostly suited
for simple checks where the predefined defaults are suitable. For all other use
cases, a configuration file fits better. 

=head2 Command Line Options

Most of 
Command for providing Nagios conmpliant output for JMX response fetched via
L<JMX::Jmx4Perl>. It knows about critical (via C<--critical>) and warning (via
C<--warning>) thresholds. 


=head1 CONFIGURATION

Using C<check_jmx4perl> with a configuration file is the most powerful way for
nagios checks. A simple configuration file looks like 

   # Define server connection parameters
   <Server tomcat>
      Url = http://localhost:8080/j4p
   </Server>

   # A simple heap memory check with a critical threshold of 
   # 90% of the maximal heap memory. 
   <Check memory_heap>     
     Value = java.lang:type=Memory/HeapMemoryUsage/used
     Base = java.lang:type=Memory/HeapMemoryUsage/max
     Unit = B
     Label = Heap-Memory: %.2r% used (%.2v %u / %.2b %u)
     Name = Heap
     Critical = 90
   </Check>

A configuration file is provided on the command line with the option
C<--config>. It can be divided in two parts: A section defining server
connection parameters and a section defining the checks themselves. 

=head2 <Server>

With the C<E<lt>Server I<name> E<gt>> the connection parameters for a specific
server is defined. In order to select a server the C<--server I<name>> command
line option has to be used. Within a C<E<lt>ServerE<gt>> configuration elment,
the following keys can be used:

=over

=item Url

The URL under which the j4p agent can be reached.

=item User, Password

If authentication is switched on, the user and the credentials can be provided
with the B<User> and B<Password> directive, respectively. The agent can be
secured as any web application. Currently, only Basic Authentication is
supported. 

=item Product

The type of application server to be monitored. This configuration can speed up
checks significantly, but only when aliases are used. By default when using
aliases, C<check_jmx4perl> uses autodetection for determine the target's
platform. This results in at least one additional HTTP-Request. This
configuration does not has any effect when MBeans are always used with their
full name. 

=item Proxy

A HTTP Proxy URL and credentials can be given with the C<E<lt>ProxyE<gt>>
sub-section. Example:

  <Server>
  ....
    <Proxy>
      Url = http://proxy.company.com:8001
      User = woody
      Password = buzz
    </Proxy>
  </Server>

=over

=item Url

The proxy URL

=item User, Password

Optional user and credentials for accessing the proxy

=back 

=item Target

With this directive, the JMX-Proxy mode can be switched on. As described in
section L</"Proxy mode">, C<check_jmx4perl> can operate in an agentless mode,
where the agent servlet is deployed only on an intermediated, so called
JMX-Proxy server, whereas the target platform only needs to export JMX
information in the traditional way (e.g. via JSR-160 export). This mode is
especially useful if the agent is not allowed to be installed on the target
platform. However, this approach has some drawbacks and some functionality is
missing there, so the agent-mode is the recommended way. A sample JMX-Proxy
configuration looks like:

  <Target>
     # TODO: "Real" URL
     Url = http://target:8080/j4p
     User = max
     Password = frisch 
  </Target>

For a discussion about the advantages and disadvantages of the JMX-Proxy mode,
please have a look at L<http://labs.consol.de/> which contains some evaluation
of this mode for various application servers (e.g. JBoss and Weblogic). 

=over 

=item Url

The JMX-RMI Url to access the target platform. 

=item User, Password

User and password for authenticating against the target server. 

=back
  
=back 

=head2 Single Check

=over 

=item Mbean

The C<ObjectName> of the MBean to monitor.

=item Attribute

Attribute to monitor. 

=item Operation

Operation, whose return value should be monitored. Either C<Attribute> or
C<Operation> should be given, but not both. If the operation takes arguments,
these need to be given as additional arguments to the C<check_jmx4perl> command
line call. In the rare case, you need to call an overloaded operation (i.e. an
operation whose name exists multiple times on the same MBean but with different
parameter types), the argument types can be given within parantheses:

  <Check>
     ....
     Operation = checkUserCount(java.lang.String,java.lang.String)
     ...
  </Check>

=item Alias

Alias, which must be known to C<check_jmx4perl>. Use C<jmx4perl aliases> to get
a list of all known aliases. If C<Alias> is given as configuration directive,
C<Operation> and/or C<Attribute> is ignored. Please note, that using C<Alias>
without C<Product> in the server section leads to at least one additional HTTP
request. 

=item Path

Path to apply to the attribute or operation return value. See L</"Pathes"> for
more information about pathes. 

=item Value

Value is a shortcut for specifying C<MBean>, C<Attribute> and C<Path> at
once. Simply append all three parts via C</> (the C<Path> part is
optional). Slashes within MBean names needs to be escaped with a C<\>
(backslash). Example:

  Value = java.lang:type=Memory/HeapMemoryUsage/used

is equivalent to 

  MBean = java.lang:type=Memory
  Attribute = HeapMemoryUsage
  Path = used

=item Base

Switches on relative checks. See L</"Relative Checks"> for more information
about relative checks. The value specified with this directives defines the
base value against which the relative value should be calculated. The format is
the same as for C<Value>:

  Base = java.lang:type=Memory/HeapMemoryUsage/max

For relative checks, the C<Critical> and C<Warning> Threshold are interpreted
as a value between 0% and 100%

=item Delta

Switches on incremental mode as described in section L</"Incremental
Checks">. The value given is used for normalization the increase rate. E.g.

  Delta 60 

measures the growth rate per minute (60 seconds). If no value is given, the
absolute increase between two checks is used. 

=item Numeric

This directive switches on numeric mode, i.e. the given threshold values are
compared numerically against the returned JMX value. By default, the check mode
is determined by an heuristic. 

=item String

String checks, which are switched on with this directive, are useful for
non-numeric thresholds. See L</"String checks"> for more details. 

=item Name

The name to be used in the performance data. By default, a name is calculated
based on the MBean and attribute/operation name.

=item Label

Format for setting the plugin output (not the performance data, use C<Name> for
this). It takes a printf like format string which is described in detail in
L</"Output Tuning">. 

=item Unit

This specifies how the return value should be interpreted. This value, if
given, must conform to the unit returned by the JMX
attribute/operation. E.g. for C<java.lang:type=Memory/HeapMemoryUsage/used>
unit, if set, must be C<B> since this JMX call returns the used memory measured
in bytes. The value given here is only used for shortening the plugin's output
automatically. For more details and for what units are available refer to
section L</"Output Tuning">

=item Critical

Specifies the critical threshold. If C<String> is set (or the heuristics
determines a string check), this should be a string value as described in
L</"String checks">. For relative checks, this should be a relative value in
ther range [0,100]. Otherwise, it is a simple numeric value which is used as
threshold. For numeric checks, the threshhold can be given in the format
defined at ... TODO.

=item Warning

Defines the warning threshold the same way as described for the C<Critical>
threshold. 

=item Null

Replacement value when an attribute is null or an operation returns a null
value. This value then can be used in string checks in order to check against
null values. By default, this value is "C<null>"

=item Use

In order to use parent checks, this directive specifies the parent along with
any parameters passed through. For example,

  Use = memory_relative_base(80,90),base_label

uses a parent check named C<memory_relative_base>, which must be a check
defined in the same configuration file (or an imported on). Additionally, the
parameters C<80> and C<90> are passed to this check (which can be accessed
there via the argument placeholders C<$0> and C<$1>). See L</"Parent checks">
and L</"Parameterized checks"> for more information about check inheritance. 

Multiple parents can be given by providing them in a comma separated list. 

=back

=head2 Includes

Check can be organized in multiple configuration files. To include another
configuration file, the C<include> directive can be used:11

  include tomcat.cfg
  include threads.cfg
  include memory.cfg

If given as relative path, the configuration files are looked up in the same
directory as the current configuration file. Absolute pathes can be given, too. 

=head2 Parent checks

With C<check_jmx4perl> parent checks it is possible to define common base
checks, which are usable in various sub-checks. Any C<E<lt>CheckE<gt>> can be a
parent check as soon as it is referenced via a C<Use> directive from within
another check's definition. When a check with a parent check is used, its
configuration is merged with this from the parent check with the own directives
having a higher priority. Parent checks can have parent checks as well (and so
on). 

For example, consider the following configuration:

  <Check grand_parent>
     Name grand_parent
     Label GrandPa
     Critical 10
  </Check>

  <Check parent_1>
     Use grand_parent
     Name parent_1
     Critical 20
  </Check>

  <Check parent_2>
     Name parent_2
     Warning 20
  </Check> 


  <Check check>
     Use parent_1,parent_2
     Warning 40
  </Check>


In this scenario, when check C<check> is used, it has a C<Name> "C<parent_2>"
(last parent check in C<Use>), a C<Label> "GrandPa" (inherited from
C<grand_parent> via C<parent_1>), a C<Critical> 20 (inherited from C<parent_1>
and a C<Warning> 40 (directly give in the check configuration). 

A parent value of a configuration directive can be refered to with the
placeholder C<$BASE>. For example:

  <Check parent>
    Name Parent
  </Check>

  <Check check>
    Use parent
    Name Child: $BASE
  </Check>

This will lead to a C<Name> "C<Child: Parent>" since C<$BASE> is resolved to
the parent checks valus of C<Name>, C<"Parent"> in this case. The base value is
searched upwards in the inheritance hierarchy (parent, grand parent, ...) until
a value is found. If nonen is found, an empty string is used for C<$BASE>

=head2 Parameterized checks

Checks can be parameterized, i.e. they can take arguments which are replaced in
the configuration during runtime. Arguments are used in check definition via
the positional format C<$0>, C<$1>, .... (e.g. C<$0> is the first argument
given). Arguments can either be given on the command line as extra arguments to
C<check_jmx4perl> or within the C<Use> directive to provide arguments to parent
checks. 

Example:

  <Check parent>
    Name $0
    Label $1
  </Check>

  <Check child_check>
    Use parent($0,"Check-Label")   
    ....
  </Check>

  $ check_jmx4perl --check child_check .... "Argument-Name"
  OK - Check-Label | 'Argument-Name'= ....

As it can be seen in this example, arguments can be propagated to a parent
check. In this case, C<$0> from the command line (C<Argument-Name>) is passed
through to the parent check which uses it in the C<Name> directive. C<$1> from
the parent check is replaced with the value "C<Check-Label>" given in the
C<Use> directive of the child check.

=head2 Multichecks

Multiple checks can be combined to a single I<MultiCheck>. The advantage of a
multi check is, that multiple values can be retrieved from the server side with
a single HTTP request. The output is conformant to Nagios 3 multiline
format. It will lead to a C<CRITICAL> value as soon as one check is critical,
same for C<WARNING>. If both, C<CRITICAL> and C<WARNING> is triggered by two or
more checks, then a C<CRITICAL> is taken.

A multi-check can be defined with the directive C<E<lt>MultiCheckE<gt>>, which
contain various references to other C<E<lt>CheckE<gt>> definitions or other
multi check definitions.

Example:

  <MultiCheck all>
    MultiCheck memory
    MultiCheck threads
  </MultiCheck>

  <MultiCheck memory>
    Check memory_heap($0,80)
    Check memory_pool_base("CMS Perm Gen",90,80)
  </MultiCheck>

  <MultiCheck threads>
    Check thread_inc
    Check thread_deadlock
  </MultiCheck>

Here a multi check group I<memory> has been defined with reference to two
checks, which must exist somewhere else in the configuration file. As it can be
seen, parameters can be given through to the check in the usual way (literally
or with references to command line arguments). The group I<all> combines the
two groups I<memory> and I<thread>, containing effectively four checks. 

A multi-check is referenced from the command line like any other check:

  $ check_jmx4perl .... --check all 90

(90 is the argument which replaces C<$0> in the definition above). 

=head2 Predefined checks



=head1 LICENSE

This file is part of jmx4perl.

Jmx4perl is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

jmx4perl is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with jmx4perl.  If not, see <http://www.gnu.org/licenses/>.

=head1 AUTHOR

roland@cpan.org

=cut

1;
