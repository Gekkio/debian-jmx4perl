#!/usr/bin/perl

use Getopt::Long;
use JMX::Jmx4Perl::Agent::Manager::JolokiaMeta;
use JMX::Jmx4Perl::Agent::Manager::DownloadAgent;
use JMX::Jmx4Perl::Agent::Manager::Logger;
use JMX::Jmx4Perl;
use Digest::MD5;
use Data::Dumper;
use strict;

# Agent manager for 
# - downloading the agent from a remote site
# - adding security constraints
# - manipulating the policy file
# - deploying it to the target server

my %opts = ();
GetOptions(\%opts,
           "mode|m=s",
           "agent|a=s",
           "proxy=s",
           "outdir|o=s",
           "repository|r=s",
           "quiet|q",
           "version|v=s",
           "help|h"
          );
 
my %COMMANDS = 
  (
   download => \&command_download
  );

my %AGENTS = 
  (
   "war" => [ "jolokia-war", "jolokia-war-%v.war", "jolokia.war" ],
   "osgi" => [ "jolokia-osgi", "jolokia-osgi-%v.jar", "jolokia.jar" ],
   "osgi-bundle" => [ "jolokia-osgi-bundle", "jolokia-osgi-bundle-%v.jar", "jolokia-bundle.jar" ],
   "mule" => [ "jolokia-mule", "jolokia-mule-%v.jar", "jolokia-mule.jar" ],
   "jdk6" => [ "jolokia-jvm-jdk6", "jolokia-jvm-jdk6-%v-agent.jar", "jolokia.jar" ]
  );


my $mode = $opts{mode} || "download";
my $command = $COMMANDS{$mode} || die "Unknown mode " . $mode . "\n";

# TODO: Add UserAgent Config here
my $ua_config = {};

my $logger = new JMX::Jmx4Perl::Agent::Manager::Logger(quiet => $opts{quiet});
my $meta = JMX::Jmx4Perl::Agent::Manager::JolokiaMeta->new(logger => $logger,ua_config => $ua_config)->load();
my $verifier = JMX::Jmx4Perl::Agent::Manager::Verifier->new(logger => $logger,ua_config => $ua_config);
eval {
    &$command($meta,\%opts);
};
die "Error while executing command '" . $mode . "' : " . $@ . "\n" if $@;

# ===========================================================

# Download an agent
sub command_download {
    my ($meta,$args) = @_;
    
    my $agent = $args->{agent} || "war";
    my $repositories = $args->{repository} ? [ $args->{repository} ] : $meta->get('repositories');

    my $version = $2 if $agent =~ s/(.*):([\d\.]+)\s*$/$1/;
    if ($version) {        
        &verify_version($meta,$version);
    } else {
        $version = $meta->latest_matching_version($JMX::Jmx4Perl::VERSION);
        unless ($version) { 
            $logger->error("Cannot find compatible Jolokia version for Jmx4Perl ",$JMX::Jmx4Perl::VERSION);
            exit(1);
        }
    }
    $logger->info("Using ","[em]","Jolokia $version","[/em]", 
                  " for ","[em]","Jmx4Perl $JMX::Jmx4Perl::VERSION","[/em]");
    
    for my $repository (@$repositories) {
        eval {
            my $download_url = &get_download_url($repository,$agent,$version);
            my $dir = $args->{outdir} || ".";
            my $file = $dir . "/" . $AGENTS{$agent}->[2];
            $logger->info("Downloading ","[em]",$agent," agent","[/em]", " version ",$version," from repository " . $repository);
            &download($download_url,$file,$args);
            &verify_signature($file,$download_url);
        };
        if ($@) {
            print "Cannot fetch from $repository: " . $@ . "Trying next ...\n";
        } else {
            return;
        }
    }
    die "Couldn't download a $agent agent from any these repositories:\n   ",join("\n   ",@$repositories),"\n";
}

sub download {
    my ($url, $file, $args) = @_;
    my $config = $args || {};
    my $ua = new JMX::Jmx4Perl::Agent::Manager::DownloadAgent(quiet => $config->{quiet});
    my $response = $ua->get($url,":content_file" => $file);
    if ($response->is_error) {
        die "Could not download agent from " . $url . ": " . $response->status_line . "\n";
    }
    $logger->info("Saved ", "[em]", $file, "[/em]"); 
}

sub verify_signature {
    my $file = shift;
    my $url = shift;
    $verifier->verify(url => $url, path => $file);
}

sub verify_version {
    my ($meta,$version) = @_;
    my @versions = keys %{$meta->get('versions')};
    $logger->error("No version $version known. Known versions: [",join(", ",sort @versions),"]") && die "\n"
      unless grep { $version eq $_ } @versions;
    $logger->warn("Current Jmx4Perl version $JMX::Jmx4Perl::VERSION is not supported by Jolokia version $version")
                  unless $meta->versions_compatible($JMX::Jmx4Perl::VERSION,$version);
}

sub get_download_url {
    my ($repository,$agent,$version) = @_;
    my ($name,$artifact) = artifact_and_name($agent,$version);
    $repository =~ s/\/+$//;            
    return $repository . "/org/jolokia/" . $name . "/" . $version . "/" . $artifact;
}

# Map agent to its artifact id and its full name (including any classifier)
sub artifact_and_name {
    my $agent = shift;
    my $version = shift;

    my $parts = $AGENTS{$agent} || die "Unknown agent type $agent. Known agent types are: ",join(", ",sort keys %AGENTS),"\n";
    my $name = $parts->[0];
    my $artifact = $parts->[1];
    $artifact =~ s/\%v/$version/g;
    return ($name,$artifact);
}
